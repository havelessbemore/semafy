!(function (e, t) {
    'object' == typeof exports && 'object' == typeof module
        ? (module.exports = t())
        : 'function' == typeof define && define.amd
        ? define('Semafy', [], t)
        : 'object' == typeof exports
        ? (exports.Semafy = t())
        : (e.Semafy = t());
})(self, function () {
    return (() => {
        'use strict';
        var e = {
                607: function (e, t, r) {
                    var i =
                            (this && this.__createBinding) ||
                            (Object.create
                                ? function (e, t, r, i) {
                                      void 0 === i && (i = r),
                                          Object.defineProperty(e, i, {
                                              enumerable: !0,
                                              get: function () {
                                                  return t[r];
                                              },
                                          });
                                  }
                                : function (e, t, r, i) {
                                      void 0 === i && (i = r), (e[i] = t[r]);
                                  }),
                        s =
                            (this && this.__exportStar) ||
                            function (e, t) {
                                for (var r in e)
                                    'default' === r || Object.prototype.hasOwnProperty.call(t, r) || i(t, e, r);
                            };
                    Object.defineProperty(t, '__esModule', { value: !0 }),
                        s(r(429), t),
                        s(r(391), t),
                        s(r(324), t),
                        s(r(643), t),
                        s(r(707), t),
                        s(r(333), t);
                },
                429: (e, t, r) => {
                    Object.defineProperty(t, '__esModule', { value: !0 }), (t.Mutex = void 0);
                    const i = r(643);
                    class s extends i.Semaphore {
                        constructor() {
                            super(1);
                        }
                    }
                    t.Mutex = s;
                },
                391: (e, t) => {
                    Object.defineProperty(t, '__esModule', { value: !0 }), (t.LinkedQueue = t.ArrayQueue = void 0);
                    class r {
                        constructor(e = []) {
                            this.array = e;
                        }
                        clear() {
                            this.array.length = 0;
                        }
                        enqueue(e) {
                            return this.array.push(e), !0;
                        }
                        dequeue() {
                            return this.size < 1 ? null : this.array.shift();
                        }
                        peek() {
                            return this.size < 1 ? null : this.array[0];
                        }
                        get size() {
                            return this.array.length;
                        }
                        [Symbol.iterator]() {
                            return {
                                next: () =>
                                    this.size < 1 ? { done: !1, value: this.dequeue() } : { done: !0, value: null },
                            };
                        }
                    }
                    t.ArrayQueue = r;
                    class i {
                        constructor() {
                            this.length = 0;
                        }
                        clear() {
                            (this.length = 0), (this.head = this.tail = void 0);
                        }
                        dequeue() {
                            if (null == this.head) return null;
                            const e = this.head;
                            return (this.head = e.next), --this.length < 1 && (this.tail = void 0), e.value;
                        }
                        enqueue(e) {
                            const t = { value: e };
                            return (
                                null == this.tail ? (this.head = t) : (this.tail.next = t),
                                (this.tail = t),
                                ++this.length,
                                !0
                            );
                        }
                        peek() {
                            return null == this.head ? null : this.head.value;
                        }
                        get size() {
                            return this.length;
                        }
                        [Symbol.iterator]() {
                            return {
                                next: () =>
                                    this.size < 1 ? { done: !1, value: this.dequeue() } : { done: !0, value: null },
                            };
                        }
                    }
                    t.LinkedQueue = i;
                },
                324: (e, t, r) => {
                    Object.defineProperty(t, '__esModule', { value: !0 }), (t.RawSemaphore = void 0);
                    const i = r(391),
                        s = r(707);
                    t.RawSemaphore = class {
                        constructor(e, t = new i.LinkedQueue()) {
                            (this.count = e), (this.queue = t);
                        }
                        clear() {
                            for (const e of this.queue) setImmediate(e, new s.SemaphoreError(), this);
                        }
                        post() {
                            ++this.count, this.update();
                        }
                        tryWait() {
                            return !(this.count < 1 || (--this.count, 0));
                        }
                        get value() {
                            return this.count;
                        }
                        wait(e) {
                            if (null == e)
                                return new Promise((e, t) => {
                                    this.wait((r, i) => (r ? t(r) : e(i)));
                                });
                            this.queue.enqueue(e), this.update();
                        }
                        waitFor(e, t) {
                            if (null == t)
                                return new Promise((t, r) => {
                                    this.waitFor(e, (e, i) => (e ? r(e) : t(i)));
                                });
                            let r;
                            e = null == e ? 0 : e;
                            const i = (e, i) => {
                                void 0 !== r && (clearTimeout(r), (r = void 0), t(e, i));
                            };
                            (r = setTimeout(() => i(new s.SemaphoreError(), this), e)),
                                this.queue.enqueue(i),
                                this.update();
                        }
                        update() {
                            if (this.count > 0 && this.queue.size > 0) {
                                --this.count;
                                const e = this.queue.dequeue();
                                setImmediate(e, void 0, this);
                            }
                        }
                    };
                },
                643: (e, t, r) => {
                    Object.defineProperty(t, '__esModule', { value: !0 }), (t.Semaphore = void 0);
                    const i = r(324),
                        s = r(333);
                    t.Semaphore = class {
                        constructor(e) {
                            this.semaphore = 'number' == typeof e ? new i.RawSemaphore(e) : e;
                        }
                        clear() {
                            this.semaphore.clear();
                        }
                        tryWait() {
                            if (this.semaphore.tryWait()) return new s.SemaphoreLock(this.semaphore);
                        }
                        get value() {
                            return this.semaphore.value;
                        }
                        wait(e) {
                            if (null == e)
                                return new Promise((e, t) => {
                                    this.wait((r, i) => (r ? t(r) : e(i)));
                                });
                            this.semaphore.wait((t, r) => {
                                e(t, new s.SemaphoreLock(r, null == t));
                            });
                        }
                        waitFor(e, t) {
                            if (null == t)
                                return new Promise((t, r) => {
                                    this.waitFor(e, (e, i) => (e ? r(e) : t(i)));
                                });
                            this.semaphore.waitFor(e, (e, r) => {
                                t(e, new s.SemaphoreLock(r, null == e));
                            });
                        }
                    };
                },
                707: (e, t) => {
                    Object.defineProperty(t, '__esModule', { value: !0 }), (t.SemaphoreError = void 0);
                    class r extends Error {
                        constructor(e) {
                            super(e || 'Unable to acquire semaphore');
                        }
                    }
                    t.SemaphoreError = r;
                },
                333: (e, t) => {
                    Object.defineProperty(t, '__esModule', { value: !0 }),
                        (t.SemaphoreLock = void 0),
                        (t.SemaphoreLock = class {
                            constructor(e, t = !0) {
                                (this.semaphore = e), (this.isAcquired = t);
                            }
                            isLocked() {
                                return this.isAcquired;
                            }
                            unlock() {
                                this.isAcquired && ((this.isAcquired = !1), this.semaphore.post());
                            }
                        });
                },
            },
            t = {};
        return (function r(i) {
            var s = t[i];
            if (void 0 !== s) return s.exports;
            var o = (t[i] = { exports: {} });
            return e[i].call(o.exports, o, o.exports, r), o.exports;
        })(607);
    })();
});
//# sourceMappingURL=semafy.min.js.map
